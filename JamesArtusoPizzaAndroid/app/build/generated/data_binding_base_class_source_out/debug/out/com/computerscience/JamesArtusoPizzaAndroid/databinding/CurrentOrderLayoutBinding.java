// Generated by view binder compiler. Do not edit!
package com.computerscience.JamesArtusoPizzaAndroid.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.computerscience.JamesArtusoPizzaAndroid.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class CurrentOrderLayoutBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final Button addOrderButton;

  @NonNull
  public final Button clearOrderButton;

  @NonNull
  public final Button currentBackButton;

  @NonNull
  public final TextView orderTotal;

  @NonNull
  public final TextView pizzaInfoView;

  @NonNull
  public final RecyclerView pizzaRecycler;

  private CurrentOrderLayoutBinding(@NonNull ConstraintLayout rootView,
      @NonNull Button addOrderButton, @NonNull Button clearOrderButton,
      @NonNull Button currentBackButton, @NonNull TextView orderTotal,
      @NonNull TextView pizzaInfoView, @NonNull RecyclerView pizzaRecycler) {
    this.rootView = rootView;
    this.addOrderButton = addOrderButton;
    this.clearOrderButton = clearOrderButton;
    this.currentBackButton = currentBackButton;
    this.orderTotal = orderTotal;
    this.pizzaInfoView = pizzaInfoView;
    this.pizzaRecycler = pizzaRecycler;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static CurrentOrderLayoutBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static CurrentOrderLayoutBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.current_order_layout, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static CurrentOrderLayoutBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.add_order_button;
      Button addOrderButton = ViewBindings.findChildViewById(rootView, id);
      if (addOrderButton == null) {
        break missingId;
      }

      id = R.id.clear_order_button;
      Button clearOrderButton = ViewBindings.findChildViewById(rootView, id);
      if (clearOrderButton == null) {
        break missingId;
      }

      id = R.id.current_back_button;
      Button currentBackButton = ViewBindings.findChildViewById(rootView, id);
      if (currentBackButton == null) {
        break missingId;
      }

      id = R.id.order_total;
      TextView orderTotal = ViewBindings.findChildViewById(rootView, id);
      if (orderTotal == null) {
        break missingId;
      }

      id = R.id.pizza_info_view;
      TextView pizzaInfoView = ViewBindings.findChildViewById(rootView, id);
      if (pizzaInfoView == null) {
        break missingId;
      }

      id = R.id.pizza_recycler;
      RecyclerView pizzaRecycler = ViewBindings.findChildViewById(rootView, id);
      if (pizzaRecycler == null) {
        break missingId;
      }

      return new CurrentOrderLayoutBinding((ConstraintLayout) rootView, addOrderButton,
          clearOrderButton, currentBackButton, orderTotal, pizzaInfoView, pizzaRecycler);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
