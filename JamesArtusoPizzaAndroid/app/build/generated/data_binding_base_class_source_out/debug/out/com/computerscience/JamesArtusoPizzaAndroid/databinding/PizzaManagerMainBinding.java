// Generated by view binder compiler. Do not edit!
package com.computerscience.JamesArtusoPizzaAndroid.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.computerscience.JamesArtusoPizzaAndroid.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class PizzaManagerMainBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final ImageView chicagoImageView;

  @NonNull
  public final ImageView currentOrderView;

  @NonNull
  public final ImageView nyImageView;

  @NonNull
  public final ImageView storeOrderView;

  private PizzaManagerMainBinding(@NonNull ConstraintLayout rootView,
      @NonNull ImageView chicagoImageView, @NonNull ImageView currentOrderView,
      @NonNull ImageView nyImageView, @NonNull ImageView storeOrderView) {
    this.rootView = rootView;
    this.chicagoImageView = chicagoImageView;
    this.currentOrderView = currentOrderView;
    this.nyImageView = nyImageView;
    this.storeOrderView = storeOrderView;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static PizzaManagerMainBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static PizzaManagerMainBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.pizza_manager_main, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static PizzaManagerMainBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.chicagoImageView;
      ImageView chicagoImageView = ViewBindings.findChildViewById(rootView, id);
      if (chicagoImageView == null) {
        break missingId;
      }

      id = R.id.currentOrderView;
      ImageView currentOrderView = ViewBindings.findChildViewById(rootView, id);
      if (currentOrderView == null) {
        break missingId;
      }

      id = R.id.nyImageView;
      ImageView nyImageView = ViewBindings.findChildViewById(rootView, id);
      if (nyImageView == null) {
        break missingId;
      }

      id = R.id.storeOrderView;
      ImageView storeOrderView = ViewBindings.findChildViewById(rootView, id);
      if (storeOrderView == null) {
        break missingId;
      }

      return new PizzaManagerMainBinding((ConstraintLayout) rootView, chicagoImageView,
          currentOrderView, nyImageView, storeOrderView);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
